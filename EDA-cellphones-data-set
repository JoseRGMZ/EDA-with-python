{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/JoseRGMZ/EDA-with-python/blob/main/EDA-cellphones-data-set\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Objetivos\n",
        "\n",
        "El participante:\n",
        "\n",
        "- Se familiarizará con la estructura del lenguaje **Python** enfocada en la ciencia de datos.\n",
        "- Comprenderá que cada proyecto solicitado poseerá distintas características (gráficos de un cierto tipo o diseño, algunos datos estadísticos, entre otros).\n",
        "- Entenderá que algunos datos se interpretan mejor al utilizar determinadas herramientas, tales como **Pandas**, **Numpy** y **Matplotlib**.\n",
        "- Asimilará la manera de estructurar la información que requiera analizar."
      ],
      "metadata": {
        "id": "ax8X7ytUKsrg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "id": "Q7DD3TsR6l6I",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "406257e8-d960-44c8-dd04-d35b0a2e44ba"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "LjNwIEwZN8nP"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt #No quitar"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_marcas = pd.read_csv('/content/drive/MyDrive/CSV_UCAMP/Marcas.csv')\n",
        "df_marcas.head\n",
        "\n"
      ],
      "metadata": {
        "id": "YKDZypl2ujhX",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a4b30453-6025-4a48-ffb2-c873125b37ab"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<bound method NDFrame.head of     ID Marca Nombre Marca\n",
              "0          1        Apple\n",
              "1          2       I Kall\n",
              "2          3      Infinix\n",
              "3          4         Lava\n",
              "4          5     Motorola\n",
              "5          6        Nokia\n",
              "6          7         Oppo\n",
              "7          8         Poco\n",
              "8          9       Realme\n",
              "9         10        Redmi\n",
              "10        11        Tecno\n",
              "11        12         Vivo>"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_modelos = pd.read_csv('/content/drive/MyDrive/CSV_UCAMP/Modelos.csv', encoding='cp1252')\n",
        "df_modelos.head\n"
      ],
      "metadata": {
        "id": "I4iNlf32F1LE",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "23d03fc2-5541-4438-fcdb-ced5ec75021b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<bound method NDFrame.head of      ID Marca                                   Modelo  RAM_GB  ROM_GB  \\\n",
              "0          10              Redmi 8 (Onyx Black, 64 GB)       4      64   \n",
              "1           9          Realme 5i (Forest Green, 64 GB)       4      64   \n",
              "2           9             Realme 5i (Aqua Blue, 64 GB)       4      64   \n",
              "3          10           Redmi 8 (Sapphire Blue, 64 GB)       4      32   \n",
              "4           8          POCO X2 (Matrix Purple, 128 GB)       6      64   \n",
              "..        ...                                      ...     ...     ...   \n",
              "115         4                             Lava 34 Plus      32      32   \n",
              "116         9            Realme 6 (Comet Blue, 128 GB)       6     128   \n",
              "117         9  Realme 6 Pro (Lightning Orange, 128 GB)       8     128   \n",
              "118         2                           I Kall K14 New      32      64   \n",
              "119         1           Apple iPhone XR (White, 64 GB)       0      64   \n",
              "\n",
              "     Calificaciones  Rese–as  Estrellas  Precio de lista  Precio de venta  \n",
              "0            674638    50064        4.4            10999             9999  \n",
              "1            243106    16497        4.5            10999            10999  \n",
              "2            243106    16497        4.5            10999            10999  \n",
              "3            674638    50064        4.4            10999             9999  \n",
              "4            133486    14732        4.5            19999            18499  \n",
              "..              ...      ...        ...              ...              ...  \n",
              "115             361       34        4.1             1699             1699  \n",
              "116           30622     3002        4.4            16999            16999  \n",
              "117           14361     1671        4.4            19999            19999  \n",
              "118            7229      822        3.4              609              609  \n",
              "119           11572      975        4.6            52500            46999  \n",
              "\n",
              "[120 rows x 9 columns]>"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_marcas.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9_zK4LszBv3E",
        "outputId": "5c6ce711-0e9d-4293-aff7-3783a3f63e6d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(12, 2)"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_modelos.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IZT28OipB0U2",
        "outputId": "f4fce7f6-c3cb-4e40-baee-68def820cfc6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(120, 9)"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Pregunta 2\n",
        "Haz un `merge` de ambos **data frames**, para generar un nuevo **data frame** que incluya los datos de `df_modelos` y `df_marcas`. Tu nuevo **data frame** recibirá el nombre de `df`.\n",
        "\n",
        "**Pista**: Ambos archivos tienen una columna que los relaciona, llamada `ID Marca`."
      ],
      "metadata": {
        "id": "cfoZq-nr2OkO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.merge(df_marcas, df_modelos, on='ID Marca')"
      ],
      "metadata": {
        "id": "S1L6Hn8VF2_v"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Pregunta 3\n",
        "Muestra las primeras cinco filas, las últimas cinco y el nombre de todas las columnas."
      ],
      "metadata": {
        "id": "AqDaTcfaTC79"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "print(\"Primeras cinco filas:\")\n",
        "print(df.head(5))\n",
        "\n",
        "print(\"\\nÚltimas cinco filas:\")\n",
        "print(df.tail(5))\n",
        "\n",
        "print(\"\\nNombre de las columnas:\")\n",
        "print(df.columns)"
      ],
      "metadata": {
        "id": "AYPcw8cLF361",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "21fdf00a-00cb-480a-ce5b-9d44c244a5c6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Primeras cinco filas:\n",
            "   ID Marca Nombre Marca                                 Modelo  RAM_GB  \\\n",
            "0         1        Apple         Apple iPhone XR (Black, 64 GB)       0   \n",
            "1         1        Apple         Apple iPhone SE (White, 64 GB)       0   \n",
            "2         1        Apple         Apple iPhone SE (Black, 64 GB)       0   \n",
            "3         1        Apple  Apple iPhone XR ((PRODUCT)RED, 64 GB)       0   \n",
            "4         1        Apple           Apple iPhone SE (Red, 64 GB)       0   \n",
            "\n",
            "   ROM_GB  Calificaciones  Rese–as  Estrellas  Precio de lista  \\\n",
            "0      32           11572      975        4.6            52500   \n",
            "1      64           12954     1298        4.5            42500   \n",
            "2      32           12954     1298        4.5            42500   \n",
            "3      64           11572      975        4.6            52500   \n",
            "4     128           12954     1298        4.5            42500   \n",
            "\n",
            "   Precio de venta  \n",
            "0            46999  \n",
            "1            40999  \n",
            "2            40999  \n",
            "3            46999  \n",
            "4            40999  \n",
            "\n",
            "Últimas cinco filas:\n",
            "     ID Marca Nombre Marca                              Modelo  RAM_GB  \\\n",
            "115        12         Vivo     Vivo Y91i (Fusion Black, 32 GB)       2   \n",
            "116        12         Vivo       Vivo Y91i (Ocean Blue, 32 GB)       2   \n",
            "117        12         Vivo  Vivo S1 Pro (Mystic Black, 128 GB)       8   \n",
            "118        12         Vivo    Vivo Y30 (Emerald Black, 128 GB)       4   \n",
            "119        12         Vivo      Vivo Y30 (Dazzle Blue, 128 GB)       4   \n",
            "\n",
            "     ROM_GB  Calificaciones  Rese–as  Estrellas  Precio de lista  \\\n",
            "115     128           21196     1445        4.3             9990   \n",
            "116     128           21196     1445        4.3             9990   \n",
            "117     128           11571      891        4.4            20990   \n",
            "118      32             604       44        4.3            18990   \n",
            "119     128             604       44        4.3            18990   \n",
            "\n",
            "     Precio de venta  \n",
            "115             7990  \n",
            "116             7990  \n",
            "117            19990  \n",
            "118            14990  \n",
            "119            14990  \n",
            "\n",
            "Nombre de las columnas:\n",
            "Index(['ID Marca', 'Nombre Marca', 'Modelo', 'RAM_GB', 'ROM_GB',\n",
            "       'Calificaciones', 'Rese–as', 'Estrellas', 'Precio de lista',\n",
            "       'Precio de venta'],\n",
            "      dtype='object')\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Pregunta 4\n",
        "Utiliza los filtros para mostrar todos los teléfonos con 64GB en la columna `ROM_GB` e indica cuántos del listado poseen esta característica."
      ],
      "metadata": {
        "id": "m2HobjRsTz7V"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Filtro\n",
        "phones_64gb = df[merged_df['ROM_GB'] == 64]\n",
        "\n",
        "print(\"Teléfonos con 64GB en la columna ROM_GB:\")\n",
        "print(phones_64gb)\n",
        "\n",
        "# Count\n",
        "count_64gb = phones_64gb.shape[0]\n",
        "print(\"\\nCantidad de teléfonos con 64GB en la columna ROM_GB:\", count_64gb)"
      ],
      "metadata": {
        "id": "-yfgYqiZF4yS",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1a8e35c8-9720-4bde-839d-7dde59ea552f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Teléfonos con 64GB en la columna ROM_GB:\n",
            "     ID Marca Nombre Marca                                 Modelo  RAM_GB  \\\n",
            "1           1        Apple         Apple iPhone SE (White, 64 GB)       0   \n",
            "3           1        Apple  Apple iPhone XR ((PRODUCT)RED, 64 GB)       0   \n",
            "5           1        Apple        Apple iPhone SE (Black, 128 GB)       0   \n",
            "7           1        Apple          Apple iPhone XR (Blue, 64 GB)       0   \n",
            "8           1        Apple     Apple iPhone 7 Plus (Black, 32 GB)       0   \n",
            "..        ...          ...                                    ...     ...   \n",
            "104        12         Vivo         Vivo Y15 (Burgundy Red, 64 GB)       4   \n",
            "105        12         Vivo            Vivo Y15 (Aqua Blue, 64 GB)       4   \n",
            "106        12         Vivo            Vivo Y12 (Aqua Blue, 64 GB)       3   \n",
            "108        12         Vivo            Vivo Y11 (Agate Red, 32 GB)       3   \n",
            "111        12         Vivo        Vivo U10 (Thunder Black, 32 GB)       3   \n",
            "\n",
            "     ROM_GB  Calificaciones  Rese–as  Estrellas  Precio de lista  \\\n",
            "1        64           12954     1298        4.5            42500   \n",
            "3        64           11572      975        4.6            52500   \n",
            "5        64           12954     1298        4.5            47800   \n",
            "7        64           11572      975        4.6            52500   \n",
            "8        64           27442     2853        4.5            37900   \n",
            "..      ...             ...      ...        ...              ...   \n",
            "104      64           20969     1505        4.4            15990   \n",
            "105      64           20969     1505        4.4            15990   \n",
            "106      64           13266      981        4.4            13990   \n",
            "108      64            4744      268        4.4             9990   \n",
            "111      64           34333     2395        4.4            10990   \n",
            "\n",
            "     Precio de venta  \n",
            "1              40999  \n",
            "3              46999  \n",
            "5              45999  \n",
            "7              46999  \n",
            "8              34999  \n",
            "..               ...  \n",
            "104            12990  \n",
            "105            12990  \n",
            "106            10990  \n",
            "108             9990  \n",
            "111            10990  \n",
            "\n",
            "[62 rows x 10 columns]\n",
            "\n",
            "Cantidad de teléfonos con 64GB en la columna ROM_GB: 62\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Pregunta 5\n",
        "Haz un histograma (`hist`) de la columna `ROM_GB` del **data frame** `df`.\n",
        "\n",
        "El gráfico debe incluir un título y las columnas tener un color personalizado."
      ],
      "metadata": {
        "id": "tfXR1-kf_WQd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.hist(df['ROM_GB'], color='blue')\n",
        "\n",
        "plt.title('Distribución de ROM_GB')\n",
        "\n",
        "plt.xlabel('ROM_GB')\n",
        "plt.ylabel('Frecuencia')\n",
        "\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "Dfk9NBLQGGb3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "outputId": "2fbd9bfd-e975-4910-9c2f-17c621604a9d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Pregunta 6\n",
        "Haz un diagrama de dispersión (`scatter`) con las siguientes características: el eje X deberá indicar el contenido de la columna `Precio de lista`, mientras que el eje Y expresará el contenido de la columna `Precio de venta`.\n",
        "\n",
        "El diagrama debe incluir un título y los puntos tener un color personalizado."
      ],
      "metadata": {
        "id": "U8QOkYQnBCDY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.scatter(df['Precio de lista'], df['Precio de venta'], color='red')\n",
        "\n",
        "# Título al diagrama de dispersión\n",
        "plt.title('Relación entre Precio de lista y Precio de venta')\n",
        "\n",
        "# Ejes x e y\n",
        "plt.xlabel('Precio de lista')\n",
        "plt.ylabel('Precio de venta')\n",
        "\n",
        "# Diagrama de dispersión\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "ttIgS7LAGHDm",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "outputId": "86511ebd-8565-415d-cceb-18e99952b737"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Pregunta 7\n",
        "\n",
        "Con base en el diagrama de la **pregunta 6**, responde la siguiente pregunta: ¿A qué conclusión podrías llegar si observas únicamente la gráfica?"
      ],
      "metadata": {
        "id": "qWHZAMi2DZos"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "La mayoria de productos rondan entre los 10,000 y 20,000 y hay mayor cantidad de ellos"
      ],
      "metadata": {
        "id": "Aql08i4fGIxs"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Pregunta 8\n",
        "Utiliza el código para obtener la siguiente información (ubicada en `df`).\n",
        "\n",
        "- Promedio de los precios de venta de los modelos marca **Realme**\n",
        "- Máximo de estrellas de los modelos marca **Redmi**\n",
        "- Mínimo de Estrellas de los modelos marca **Redmi**"
      ],
      "metadata": {
        "id": "3H4LtqjhEGME"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# AVG\n",
        "promedio_precio_realme = df[df['Nombre Marca'] == 'Realme']['Precio de venta'].mean()\n",
        "\n",
        "# Max\n",
        "max_estrellas_redmi = df[df['Nombre Marca'] == 'Redmi']['Estrellas'].max()\n",
        "\n",
        "# Min\n",
        "min_estrellas_redmi = df[df['Nombre Marca'] == 'Redmi']['Estrellas'].min()\n",
        "\n",
        "print(\"Promedio de precios de venta de los modelos marca Realme:\", promedio_precio_realme)\n",
        "print(\"Máximo de estrellas de los modelos marca Redmi:\", max_estrellas_redmi)\n",
        "print(\"Mínimo de estrellas de los modelos marca Redmi:\", min_estrellas_redmi)"
      ],
      "metadata": {
        "id": "8AApDz1dGKQr",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "82c0c572-2e41-4aa4-8ebe-9f704e06fae2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Promedio de precios de venta de los modelos marca Realme: 12423.242424242424\n",
            "Máximo de estrellas de los modelos marca Redmi: 4.4\n",
            "Mínimo de estrellas de los modelos marca Redmi: 4.2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Pregunta 9\n",
        "Utiliza un **Groupby** para mostrar la cantidad de estrellas promedio que cada marca tiene en `df`."
      ],
      "metadata": {
        "id": "ds4EGI0SHEKB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Group\n",
        "estrellas_promedio_por_marca = df.groupby('Nombre Marca')['Estrellas'].mean()\n",
        "\n",
        "print(estrellas_promedio_por_marca)"
      ],
      "metadata": {
        "id": "U_iMhR_gGLBV",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "41b48dd7-0dd9-433d-af95-2fd728962d62"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Nombre Marca\n",
            "Apple       4.554545\n",
            "I Kall      2.984615\n",
            "Infinix     4.387500\n",
            "Lava        4.100000\n",
            "Motorola    4.400000\n",
            "Nokia       4.300000\n",
            "Oppo        4.325000\n",
            "Poco        4.500000\n",
            "Realme      4.475758\n",
            "Redmi       4.340000\n",
            "Tecno       4.266667\n",
            "Vivo        4.375000\n",
            "Name: Estrellas, dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Pregunta 10\n",
        "¿Qué otro dato puedes obtener de `df` y cómo lo extraerías?"
      ],
      "metadata": {
        "id": "ALRDH3eRHkZN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Cantidad de modelos por marca\n",
        "modelos_por_marca = df['Nombre Marca'].value_counts()\n",
        "print(modelos_por_marca)\n",
        "#Rango de precios de venta:\n",
        "precio_minimo = df['Precio de venta'].min()\n",
        "precio_maximo = df['Precio de venta'].max()\n",
        "print(\"Rango de precios de venta: {} - {}\".format(precio_minimo, precio_maximo))"
      ],
      "metadata": {
        "id": "9HUy8LdgGLvM",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6f8d9f97-478a-4514-f4ca-0038bff10a7a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Realme      33\n",
            "Oppo        16\n",
            "Vivo        16\n",
            "I Kall      13\n",
            "Apple       11\n",
            "Redmi       10\n",
            "Infinix      8\n",
            "Poco         5\n",
            "Motorola     3\n",
            "Tecno        3\n",
            "Lava         1\n",
            "Nokia        1\n",
            "Name: Nombre Marca, dtype: int64\n",
            "Rango de precios de venta: 609 - 52999\n"
          ]
        }
      ]
    }
  ]
}